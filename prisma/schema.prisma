generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String    @id @default(cuid())
  userId    String    @unique
  name      String
  imageUrl  String
  email     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Channel   Channel[]
  Member    Member[]
  servers   Server[]
}

model Server {
  id         String    @id @default(cuid())
  name       String
  imageUrl   String
  inviteCode String    @unique
  profileId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  channels   Channel[]
  members    Member[]
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Member {
  id   String     @id @default(cuid())
  role MemberRole

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id   String      @id @default(cuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  Message   Message[]
  createdAt DateTime  @default(now())

  updatedAt DateTime @updatedAt
}

enum MemberRole {
  ADMIN
  MEMBER
  GUEST
  MODERATOR
}

enum ChannelType {
  TEXT
  VIDEO
  AUDIO
}

model Message {
  id      String  @id @default(cuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  ChannelId String
  channel   Channel @relation(fields: [ChannelId], references: [id], onDelete: Cascade)

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ChannelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(cuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id String @id @default(cuid())

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  content String  @db.Text
  fileUrl String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isDeleted Boolean @default(false)

  @@index([conversationId])
  @@index([memberId])
}
